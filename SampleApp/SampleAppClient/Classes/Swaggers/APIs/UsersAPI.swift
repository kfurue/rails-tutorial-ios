//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class UsersAPI: APIBase {
    /**
     Return all users.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApiV1Users(completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getApiV1UsersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Return all users.
     
     - returns: Observable<[User]>
     */
    open class func getApiV1Users() -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            getApiV1Users() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Return all users.
     - GET /api/v1/users
     - Return all users.
     - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "id" : 0,
  "email" : "aeiou"
} ]}]

     - returns: RequestBuilder<[User]> 
     */
    open class func getApiV1UsersWithRequestBuilder() -> RequestBuilder<[User]> {
        let path = "/api/v1/users"
        let URLString = SampleAppClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[User]>.Type = SampleAppClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return user with id.
     
     - parameter id: (path) User id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApiV1UsersId(id: Int, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        getApiV1UsersIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Return user with id.
     
     - parameter id: (path) User id. 
     - returns: Observable<User>
     */
    open class func getApiV1UsersId(id: Int) -> Observable<User> {
        return Observable.create { observer -> Disposable in
            getApiV1UsersId(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Return user with id.
     - GET /api/v1/users/{id}
     - Return user with id.
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "id" : 0,
  "email" : "aeiou"
}}]
     
     - parameter id: (path) User id. 

     - returns: RequestBuilder<User> 
     */
    open class func getApiV1UsersIdWithRequestBuilder(id: Int) -> RequestBuilder<User> {
        var path = "/api/v1/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SampleAppClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SampleAppClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return followers of user with id.
     
     - parameter id: (path) User id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApiV1UsersIdFollowers(id: Int, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getApiV1UsersIdFollowersWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Return followers of user with id.
     
     - parameter id: (path) User id. 
     - returns: Observable<[User]>
     */
    open class func getApiV1UsersIdFollowers(id: Int) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            getApiV1UsersIdFollowers(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Return followers of user with id.
     - GET /api/v1/users/{id}/followers
     - Return followers of user with id.
     - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "id" : 0,
  "email" : "aeiou"
} ]}]
     
     - parameter id: (path) User id. 

     - returns: RequestBuilder<[User]> 
     */
    open class func getApiV1UsersIdFollowersWithRequestBuilder(id: Int) -> RequestBuilder<[User]> {
        var path = "/api/v1/users/{id}/followers"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SampleAppClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[User]>.Type = SampleAppClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return following users of user with id.
     
     - parameter id: (path) User id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApiV1UsersIdFollowing(id: Int, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getApiV1UsersIdFollowingWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Return following users of user with id.
     
     - parameter id: (path) User id. 
     - returns: Observable<[User]>
     */
    open class func getApiV1UsersIdFollowing(id: Int) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            getApiV1UsersIdFollowing(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Return following users of user with id.
     - GET /api/v1/users/{id}/following
     - Return following users of user with id.
     - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "id" : 0,
  "email" : "aeiou"
} ]}]
     
     - parameter id: (path) User id. 

     - returns: RequestBuilder<[User]> 
     */
    open class func getApiV1UsersIdFollowingWithRequestBuilder(id: Int) -> RequestBuilder<[User]> {
        var path = "/api/v1/users/{id}/following"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SampleAppClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[User]>.Type = SampleAppClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return microposts of user with id.
     
     - parameter id: (path) User id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApiV1UsersIdMicroposts(id: Int, completion: @escaping ((_ data: [Micropost]?,_ error: Error?) -> Void)) {
        getApiV1UsersIdMicropostsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Return microposts of user with id.
     
     - parameter id: (path) User id. 
     - returns: Observable<[Micropost]>
     */
    open class func getApiV1UsersIdMicroposts(id: Int) -> Observable<[Micropost]> {
        return Observable.create { observer -> Disposable in
            getApiV1UsersIdMicroposts(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Return microposts of user with id.
     - GET /api/v1/users/{id}/microposts
     - Return microposts of user with id.
     - examples: [{contentType=application/json, example=[ {
  "user_id" : 6,
  "id" : 0,
  "content" : "aeiou",
  "picture" : {
    "url" : "aeiou"
  }
} ]}]
     
     - parameter id: (path) User id. 

     - returns: RequestBuilder<[Micropost]> 
     */
    open class func getApiV1UsersIdMicropostsWithRequestBuilder(id: Int) -> RequestBuilder<[Micropost]> {
        var path = "/api/v1/users/{id}/microposts"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SampleAppClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Micropost]>.Type = SampleAppClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
