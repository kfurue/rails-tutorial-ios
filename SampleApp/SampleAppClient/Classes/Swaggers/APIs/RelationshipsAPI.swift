//
// RelationshipsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class RelationshipsAPI: APIBase {
    /**
     Destroy relationship between user with followed_id.
     
     - parameter followedId: (query) The ID of the user for whom to be unfollowed. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteApiV1Relationships(followedId: Int, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteApiV1RelationshipsWithRequestBuilder(followedId: followedId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Destroy relationship between user with followed_id.
     
     - parameter followedId: (query) The ID of the user for whom to be unfollowed. 
     - returns: Observable<Void>
     */
    open class func deleteApiV1Relationships(followedId: Int) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteApiV1Relationships(followedId: followedId) { error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next())
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Destroy relationship between user with followed_id.
     - DELETE /api/v1/relationships
     - Destroy relationship between user with followed_id.
     
     - parameter followedId: (query) The ID of the user for whom to be unfollowed. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteApiV1RelationshipsWithRequestBuilder(followedId: Int) -> RequestBuilder<Void> {
        let path = "/api/v1/relationships"
        let URLString = SampleAppClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "followed_id": followedId.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SampleAppClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create relationship between user with followed_id.
     
     - parameter followedId: (form) The ID of the user for whom to be followed. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postApiV1Relationships(followedId: Int, completion: @escaping ((_ error: Error?) -> Void)) {
        postApiV1RelationshipsWithRequestBuilder(followedId: followedId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Create relationship between user with followed_id.
     
     - parameter followedId: (form) The ID of the user for whom to be followed. 
     - returns: Observable<Void>
     */
    open class func postApiV1Relationships(followedId: Int) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            postApiV1Relationships(followedId: followedId) { error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next())
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create relationship between user with followed_id.
     - POST /api/v1/relationships
     - Create relationship between user with followed_id.
     
     - parameter followedId: (form) The ID of the user for whom to be followed. 

     - returns: RequestBuilder<Void> 
     */
    open class func postApiV1RelationshipsWithRequestBuilder(followedId: Int) -> RequestBuilder<Void> {
        let path = "/api/v1/relationships"
        let URLString = SampleAppClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "followed_id": followedId.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SampleAppClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
